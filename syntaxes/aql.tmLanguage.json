{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"_reference": "https://raw.githubusercontent.com/arangodb/arangodb/master/js/apps/system/_admin/aardvark/APP/frontend/src/mode-aql.js",
	"name": "AQL (ArangoDB Query Language)",
	"patterns": [
		{ "include": "#constant" },
		{ "include": "#number" },
		{ "include": "#keyword" },
		{ "include": "#function" },
		{ "include": "#string" },
		{ "include": "#comments" },
		{ "include": "#punctuations" }
	],
	"repository": {
		"constant": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.aql",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "constant.language.boolean.false.aql",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "constant.language.null.aql",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))null(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"match": "!|[!<>]?(=|~)|<>|<|>|~",
					"name": "keyword.operator.comparison.aql"
				},
				{
					"match": "\\-|\\+|\\*|\\%|((?<=[^\\/])(?<=[^\\*]))\\/(?=[^\\/])(?=[^\\*])",
					"name": "keyword.operator.arithmetic.aql"
				},
				{
					"match": "\\|\\|",
					"name": "keyword.operator.or.aql"
				},
				{
					"match": "\\&\\&",
					"name": "keyword.operator.and.aql"
				},
				{
					"begin": "(?!\\?\\.\\s*[^[:digit:]])(\\?)(?!\\?)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.ternary.aql"
						}
					},
					"end": "\\s*(:)",
					"endCaptures": {
						"1": {
							"name": "keyword.operator.ternary.aql"
						}
					},
					"patterns": [
						{ "include": "#constant" },
						{ "include": "#number" },
						{ "include": "#keyword" },
						{ "include": "#function" },
						{ "include": "#string" },
						{ "include": "#comments" },
						{ "include": "#punctuations" }
					]
				}
			]
		},
		"number": {
			"match": "\\b\\d+\\b",
			"name": "constant.numeric.aql"
		},
		"keyword": {
			"patterns": [
				{
					"match": "(?i)\\b(FOR|RETURN|FILTER|SEARCH|SORT|LIMIT|LET|COLLECT|ASC|DESC|IN|INTO|INSERT|UPDATE|REMOVE|REPLACE|UPSERT|OPTIONS|WITH|AND|OR|NOT|DISTINCT|GRAPH|SHORTEST_PATH|OUTBOUND|INBOUND|ANY|ALL|NONE|AGGREGATE|LIKE|K_SHORTEST_PATHS|PRUNE)\\b",
					"name": "keyword.control.aql"
				}
			]
		},
		"function": {
			"patterns": [
				{
					"match": "(?i)\\b(BM25|TFIDF|BOOST|IN_RANGE|PHRASE|STARTS_WITH|TOKENS|WITHIN_RECTANGLE|WITHIN|WARN|PREGEL_RESULT|COLLECTION_COUNT|CHECK_DOCUMENT|CURRENT_DATABASE|CURRENT_USER|VERSION|V8|DECODE_REV|IS_SAME_COLLECTION|PARSE_IDENTIFIER|FIRST_DOCUMENT|INTERSECTION|RADIANS|UNION|DATE_MINUTE|ATAN|FULLTEXT|ATAN2|COS|EXP|GEO_MULTILINESTRING|LOG2|SQRT|GEO_INTERSECTS|FLOOR|RIGHT|COLLECTIONS|COUNT|ABS|UUID|ENCODE_URI_COMPONENT|DATE_MONTH|ANALYZER|TO_HEX|POW|CONTAINS|SHA1|IS_DOCUMENT|SUBSTITUTE|FIRST|VALUES|PI|CONCAT|REMOVE_VALUE|OUTERSECTION|STDDEV|SHA512|UNION_DISTINCT|LEVENSHTEIN_DISTANCE|ASSERT|TRANSLATE|IS_KEY|RAND|SLICE|LOG10|HAS|FAIL|IS_BOOL|IS_NULL|CHAR_LENGTH|ASIN|TO_LIST|CEIL|ATTRIBUTES|TO_ARRAY|LEFT|SORTED_UNIQUE|MATCHES|TAN|NEAR|TO_BASE64|REMOVE_VALUES|IS_NUMBER|REGEX_MATCHES|LAST|IS_STRING|TYPENAME|KEEP|NOOPT|DATE_YEAR|IS_LIST|NOEVAL|DATE_ISO8601|FIND_LAST|SPLIT|DISTANCE|LOWER|DOCUMENT|REGEX_TEST|UNSHIFT|AVG|REGEX_SPLIT|LOG|IS_IN_POLYGON|DEGREES|TO_NUMBER|REGEX_REPLACE|IS_OBJECT|HASH|EXP2|GEO_LINESTRING|TRIM|DATE_ADD|TO_STRING|LTRIM|DATE_NOW|RANDOM_TOKEN|SLEEP|ACOS|CRC32|IS_ARRAY|FIND_FIRST|FLATTEN|UNSET_RECURSIVE|MERGE_RECURSIVE|ROUND|LENGTH|TO_BOOL|SORTED|SOUNDEX|GEO_MULTIPOLYGON|MIN|SIN|SUBSTRING|MAX|SUM|COUNT_UNIQUE|MEDIAN|DATE_HOUR|NOT_NULL|PERCENTILE|AVERAGE|VARIANCE_SAMPLE|VARIANCE_POPULATION|VARIANCE|COUNT_DISTINCT|PASSTHRU|RANGE|REVERSE|GEO_DISTANCE|RTRIM|NTH|MIN_MATCH|POSITION|JSON_STRINGIFY|CONTAINS_ARRAY|STDDEV_SAMPLE|APPEND|FIRST_LIST|POP|REMOVE_NTH|CALL|FNV64|CONCAT_SEPARATOR|APPLY|MERGE|DATE_DAY|UNSET|EXISTS|MINUS|JSON_PARSE|GEO_CONTAINS|GEO_EQUALS|DATE_QUARTER|STDDEV_POPULATION|UPPER|GEO_AREA|MD5|GEO_POINT|SHIFT|GEO_MULTIPOINT|GEO_POLYGON|DATE_TIMESTAMP|IS_DATESTRING|UNIQUE|DATE_DAYOFWEEK|ZIP|DATE_SECOND|DATE_DAYOFYEAR|DATE_MILLISECOND|DATE_ISOWEEK|PUSH|DATE_LEAPYEAR|LIKE|DATE_DAYS_IN_MONTH|DATE_SUBTRACT|DATE_DIFF|DATE_COMPARE|KEYS|DATE_FORMAT|DATE_TRUNC)\\b",
					"name": "support.function.aql"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.aql"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.aql"
						}
					},
					"name": "string.quoted.single.aql",
					"patterns": [
						{
							"match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
							"name": "constant.character.escape.aql"
						},
						{
							"match": "[^']*[^\\n\\r'\\\\]$",
							"name": "invalid.illegal.string.aql"
						}
					]
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.aql"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.aql"
						}
					},
					"name": "string.quoted.double.aql",
					"patterns": [
						{
							"match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
							"name": "constant.character.escape.aql"
						},
						{
							"match": "[^\"]*[^\\n\\r\"\\\\]$",
							"name": "invalid.illegal.string.aql"
						}
					]
				},
				{
					"begin": "`",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.aql"
						}
					},
					"end": "`",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.aql"
						}
					},
					"name": "string.quoted.template.aql",
					"patterns": [
						{
							"match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
							"name": "constant.character.escape.aql"
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"match": "//.*",
					"name": "comment.line.double-slash.aql"
				},
				{
					"begin": "/\\*\\*(?!/)",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.aql"
						}
					},
					"end": "\\*/",
					"name": "comment.block.documentation.aql"
				},
				{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.aql"
						}
					},
					"end": "\\*/",
					"name": "comment.block.aql"
				}
			]
		},
		"punctuations": {
			"patterns": [
				{
					"match": "\\{|\\}|\\(|\\)|\\[|\\]",
					"name": "punctuation.definition.block.aql"
				},
				{
					"match": "\\,|\\.|\\:",
					"name": "punctuation.separator.block.aql"
				}
			]
		}
	},
	"scopeName": "source.aql"
}
