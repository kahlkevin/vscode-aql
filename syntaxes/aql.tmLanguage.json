{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"_reference": "https://raw.githubusercontent.com/arangodb/arangodb/master/js/apps/system/_admin/aardvark/APP/frontend/src/mode-aql.js",
	"name": "AQL (ArangoDB Query Language)",
	"patterns": [
		{ "include": "#constant" },
		{ "include": "#number" },
		{ "include": "#keyword" },
		{ "include": "#function" },
		{ "include": "#string" },
		{ "include": "#comments" },
		{ "include": "#punctuations" }
	],
	"repository": {
		"constant": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.js",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "constant.language.boolean.false.js",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "constant.language.null.js",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))null(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"match": "!|[!<>]?(=|~)|<>|<|>|~",
					"name": "keyword.operator.comparison.aql"
				},
				{
					"match": "\\-|\\+|\\*|\\%|((?<=[^\\/])(?<=[^\\*]))\\/(?=[^\\/])(?=[^\\*])",
					"name": "keyword.operator.arithmetic.aql"
				},
				{
					"match": "\\|\\|",
					"name": "keyword.operator.or.aql"
				},
				{
					"match": "\\&\\&",
					"name": "keyword.operator.and.aql"
				},
				{
					"begin": "(?!\\?\\.\\s*[^[:digit:]])(\\?)(?!\\?)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.ternary.aql"
						}
					},
					"end": "\\s*(:)",
					"endCaptures": {
						"1": {
							"name": "keyword.operator.ternary.aql"
						}
					},
					"patterns": [
						{ "include": "#constant" },
						{ "include": "#number" },
						{ "include": "#keyword" },
						{ "include": "#function" },
						{ "include": "#string" },
						{ "include": "#comments" },
						{ "include": "#punctuations" }
					]
				}
			]
		},
		"number": {
			"match": "\\b\\d+\\b",
			"name": "constant.numeric.aql"
		},
		"keyword": {
			"patterns": [
				{
					"match": "\\b(for|return|filter|search|sort|limit|let|collect|asc|desc|in|into|insert|update|remove|replace|upsert|options|with|and|or|not|distinct|graph|shortest_path|outbound|inbound|any|all|none|aggregate|like|k_shortest_paths|prune)\\b",
					"name": "keyword.control.aql"
				},
				{
					"match": "\\b(FOR|RETURN|FILTER|SEARCH|SORT|LIMIT|LET|COLLECT|ASC|DESC|IN|INTO|INSERT|UPDATE|REMOVE|REPLACE|UPSERT|OPTIONS|WITH|AND|OR|NOT|DISTINCT|GRAPH|SHORTEST_PATH|OUTBOUND|INBOUND|ANY|ALL|NONE|AGGREGATE|LIKE|K_SHORTEST_PATHS|PRUNE)\\b",
					"name": "keyword.control.aql"
				}
			]
		},
		"function": {
			"patterns": [
				{
					"match": "\\b(bm25|tfidf|boost|in_range|phrase|starts_with|tokens|within_rectangle|within|warn|pregel_result|collection_count|check_document|current_database|current_user|version|v8|decode_rev|is_same_collection|parse_identifier|first_document|intersection|radians|union|date_minute|atan|fulltext|atan2|cos|exp|geo_multilinestring|log2|sqrt|geo_intersects|floor|right|collections|count|abs|uuid|encode_uri_component|date_month|analyzer|to_hex|pow|contains|sha1|is_document|substitute|first|values|pi|concat|remove_value|outersection|stddev|sha512|union_distinct|levenshtein_distance|assert|translate|is_key|rand|slice|log10|has|fail|is_bool|is_null|char_length|asin|to_list|ceil|attributes|to_array|left|sorted_unique|matches|tan|near|to_base64|remove_values|is_number|regex_matches|last|is_string|typename|keep|noopt|date_year|is_list|noeval|date_iso8601|find_last|split|distance|lower|document|regex_test|unshift|avg|regex_split|log|is_in_polygon|degrees|to_number|regex_replace|is_object|hash|exp2|geo_linestring|trim|date_add|to_string|ltrim|date_now|random_token|sleep|acos|crc32|is_array|find_first|flatten|unset_recursive|merge_recursive|round|length|to_bool|sorted|soundex|geo_multipolygon|min|sin|substring|max|sum|count_unique|median|date_hour|not_null|percentile|average|variance_sample|variance_population|variance|count_distinct|passthru|range|reverse|geo_distance|rtrim|nth|min_match|position|json_stringify|contains_array|stddev_sample|append|first_list|pop|remove_nth|call|fnv64|concat_separator|apply|merge|date_day|unset|exists|minus|json_parse|geo_contains|geo_equals|date_quarter|stddev_population|upper|geo_area|md5|geo_point|shift|geo_multipoint|geo_polygon|date_timestamp|is_datestring|unique|date_dayofweek|zip|date_second|date_dayofyear|date_millisecond|date_isoweek|push|date_leapyear|like|date_days_in_month|date_subtract|date_diff|date_compare|keys|date_format|date_trunc)\\b",
					"name": "support.function.aql"
				},
				{
					"match": "\\b(BM25|TFIDF|BOOST|IN_RANGE|PHRASE|STARTS_WITH|TOKENS|WITHIN_RECTANGLE|WITHIN|WARN|PREGEL_RESULT|COLLECTION_COUNT|CHECK_DOCUMENT|CURRENT_DATABASE|CURRENT_USER|VERSION|V8|DECODE_REV|IS_SAME_COLLECTION|PARSE_IDENTIFIER|FIRST_DOCUMENT|INTERSECTION|RADIANS|UNION|DATE_MINUTE|ATAN|FULLTEXT|ATAN2|COS|EXP|GEO_MULTILINESTRING|LOG2|SQRT|GEO_INTERSECTS|FLOOR|RIGHT|COLLECTIONS|COUNT|ABS|UUID|ENCODE_URI_COMPONENT|DATE_MONTH|ANALYZER|TO_HEX|POW|CONTAINS|SHA1|IS_DOCUMENT|SUBSTITUTE|FIRST|VALUES|PI|CONCAT|REMOVE_VALUE|OUTERSECTION|STDDEV|SHA512|UNION_DISTINCT|LEVENSHTEIN_DISTANCE|ASSERT|TRANSLATE|IS_KEY|RAND|SLICE|LOG10|HAS|FAIL|IS_BOOL|IS_NULL|CHAR_LENGTH|ASIN|TO_LIST|CEIL|ATTRIBUTES|TO_ARRAY|LEFT|SORTED_UNIQUE|MATCHES|TAN|NEAR|TO_BASE64|REMOVE_VALUES|IS_NUMBER|REGEX_MATCHES|LAST|IS_STRING|TYPENAME|KEEP|NOOPT|DATE_YEAR|IS_LIST|NOEVAL|DATE_ISO8601|FIND_LAST|SPLIT|DISTANCE|LOWER|DOCUMENT|REGEX_TEST|UNSHIFT|AVG|REGEX_SPLIT|LOG|IS_IN_POLYGON|DEGREES|TO_NUMBER|REGEX_REPLACE|IS_OBJECT|HASH|EXP2|GEO_LINESTRING|TRIM|DATE_ADD|TO_STRING|LTRIM|DATE_NOW|RANDOM_TOKEN|SLEEP|ACOS|CRC32|IS_ARRAY|FIND_FIRST|FLATTEN|UNSET_RECURSIVE|MERGE_RECURSIVE|ROUND|LENGTH|TO_BOOL|SORTED|SOUNDEX|GEO_MULTIPOLYGON|MIN|SIN|SUBSTRING|MAX|SUM|COUNT_UNIQUE|MEDIAN|DATE_HOUR|NOT_NULL|PERCENTILE|AVERAGE|VARIANCE_SAMPLE|VARIANCE_POPULATION|VARIANCE|COUNT_DISTINCT|PASSTHRU|RANGE|REVERSE|GEO_DISTANCE|RTRIM|NTH|MIN_MATCH|POSITION|JSON_STRINGIFY|CONTAINS_ARRAY|STDDEV_SAMPLE|APPEND|FIRST_LIST|POP|REMOVE_NTH|CALL|FNV64|CONCAT_SEPARATOR|APPLY|MERGE|DATE_DAY|UNSET|EXISTS|MINUS|JSON_PARSE|GEO_CONTAINS|GEO_EQUALS|DATE_QUARTER|STDDEV_POPULATION|UPPER|GEO_AREA|MD5|GEO_POINT|SHIFT|GEO_MULTIPOINT|GEO_POLYGON|DATE_TIMESTAMP|IS_DATESTRING|UNIQUE|DATE_DAYOFWEEK|ZIP|DATE_SECOND|DATE_DAYOFYEAR|DATE_MILLISECOND|DATE_ISOWEEK|PUSH|DATE_LEAPYEAR|LIKE|DATE_DAYS_IN_MONTH|DATE_SUBTRACT|DATE_DIFF|DATE_COMPARE|KEYS|DATE_FORMAT|DATE_TRUNC)\\b",
					"name": "support.function.aql"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.js"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.js"
						}
					},
					"name": "string.quoted.single.js",
					"patterns": [
						{
							"match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
							"name": "constant.character.escape.js"
						},
						{
							"match": "[^']*[^\\n\\r'\\\\]$",
							"name": "invalid.illegal.string.js"
						}
					]
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.js"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.js"
						}
					},
					"name": "string.quoted.double.js",
					"patterns": [
						{
							"match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
							"name": "constant.character.escape.js"
						},
						{
							"match": "[^\"]*[^\\n\\r\"\\\\]$",
							"name": "invalid.illegal.string.js"
						}
					]
				},
				{
					"begin": "`",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.js"
						}
					},
					"end": "`",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.js"
						}
					},
					"name": "string.quoted.template.js",
					"patterns": [
						{
							"match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
							"name": "constant.character.escape.js"
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"match": "//.*",
					"name": "comment.single.json"
				},
				{
					"begin": "/\\*\\*(?!/)",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.json"
						}
					},
					"end": "\\*/",
					"name": "comment.block.documentation.json"
				},
				{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.json"
						}
					},
					"end": "\\*/",
					"name": "comment.block.json"
				}
			]
		},
		"punctuations": {
			"patterns": [
				{
					"match": "\\{|\\}|\\(|\\)|\\[|\\]",
					"name": "punctuation.definition.block.aql"
				},
				{
					"match": "\\,|\\.|\\:",
					"name": "punctuation.separator.block.aql"
				}
			]
		}
	},
	"scopeName": "source.aql"
}
