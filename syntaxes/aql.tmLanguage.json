{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"_reference": "https://raw.githubusercontent.com/arangodb/arangodb/master/js/apps/system/_admin/aardvark/APP/frontend/src/mode-aql.js",
	"name": "AQL (ArangoDB Query Language)",
	"patterns": [
		{ "include": "#constant" },
		{ "include": "#number" },
		{ "include": "#keyword" },
		{ "include": "#function" },
		{ "include": "#string" },
		{ "include": "#comments" },
		{ "include": "#punctuations" }
	],
	"repository": {
		"constant": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.aql",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "constant.language.boolean.false.aql",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "constant.language.null.aql",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))null(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"match": "!|[!<>]?(=|~)|<>|<|>|~",
					"name": "keyword.operator.comparison.aql"
				},
				{
					"match": "\\-|\\+|\\*|\\%|((?<=[^\\/])(?<=[^\\*]))\\/(?=[^\\/])(?=[^\\*])",
					"name": "keyword.operator.arithmetic.aql"
				},
				{
					"match": "\\|\\|",
					"name": "keyword.operator.or.aql"
				},
				{
					"match": "\\&\\&",
					"name": "keyword.operator.and.aql"
				},
				{
					"begin": "(?!\\?\\.\\s*[^[:digit:]])(\\?)(?!\\?)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.ternary.aql"
						}
					},
					"end": "\\s*(:)",
					"endCaptures": {
						"1": {
							"name": "keyword.operator.ternary.aql"
						}
					},
					"patterns": [
						{ "include": "#constant" },
						{ "include": "#number" },
						{ "include": "#keyword" },
						{ "include": "#function" },
						{ "include": "#string" },
						{ "include": "#comments" },
						{ "include": "#punctuations" }
					]
				}
			]
		},
		"number": {
			"match": "\\b\\d+\\b",
			"name": "constant.numeric.aql"
		},
		"keyword": {
			"patterns": [
				{
					"match": "(?i)\\b(FOR|RETURN|FILTER|SEARCH|SORT|LIMIT|LET|COLLECT|ASC|DESC|IN|INTO|INSERT|UPDATE|REMOVE|REPLACE|UPSERT|OPTIONS|WITH|AND|OR|NOT|DISTINCT|GRAPH|SHORTEST_PATH|OUTBOUND|INBOUND|ANY|ALL|NONE|AGGREGATE|LIKE|K_SHORTEST_PATHS|PRUNE)\\b",
					"name": "keyword.control.aql"
				}
			]
		},
		"function": {
			"patterns": [
				{
					"match": "(?i)\\b(BM25|TFIDF|COUNT_DISTINCT|STDDEV_SAMPLE|IS_OBJECT|DATE_TRUNC|AVG|AVERAGE|INTERSECTION|POP|IS_DOCUMENT|UNION_DISTINCT|SLEEP|RANGE|REGEX_TEST|PERCENTILE|RAND|DATE_SUBTRACT|PI|DEGREES|MERGE_RECURSIVE|CURRENT_USER|DATE_QUARTER|ATAN2|ACOS|IS_LIST|LENGTH|FIRST_LIST|UNSHIFT|TRIM|EXP|LAST|ATTRIBUTES|POW|LOG2|VARIANCE_SAMPLE|RADIANS|LOG|ABS|GEO_AREA|RANDOM_TOKEN|LEVENSHTEIN_DISTANCE|VARIANCE|FAIL|VARIANCE_POPULATION|DATE_NOW|CONTAINS|IS_DATESTRING|REGEX_MATCHES|SPLIT|LOWER|MIN|COS|SUBSTRING|SORTED|ATAN|GEO_MULTIPOINT|ANALYZER|CONCAT|FIND_LAST|JSON_STRINGIFY|DATE_DAY|NOEVAL|MEDIAN|STDDEV_POPULATION|TO_STRING|IS_NUMBER|FNV64|MAX|ROUND|RIGHT|UPPER|APPEND|COLLECTION_COUNT|COUNT|TO_NUMBER|ASIN|DATE_ISO8601|IS_BOOL|COUNT_UNIQUE|V8|FLATTEN|JSON_PARSE|STARTS_WITH|IS_IN_POLYGON|MD5|TYPENAME|TO_HEX|DATE_ROUND|MINUS|LEFT|VALUES|APPLY|REGEX_SPLIT|GEO_MULTIPOLYGON|REGEX_REPLACE|SUM|UNIQUE|UNION|RTRIM|FIND_FIRST|LTRIM|CONCAT_SEPARATOR|GEO_CONTAINS|PASSTHRU|GEO_INTERSECTS|IS_SAME_COLLECTION|HASH|TO_BASE64|DATE_MILLISECOND|FLOOR|IS_KEY|SUBSTITUTE|SHA1|CHAR_LENGTH|PUSH|IS_NULL|CRC32|ENCODE_URI_COMPONENT|EXP2|SIN|TO_ARRAY|DATE_ISOWEEK|SORTED_UNIQUE|SLICE|REVERSE|SHA512|DATE_HOUR|FIRST|REMOVE_VALUE|NTH|POSITION|CONTAINS_ARRAY|SHIFT|STDDEV|REMOVE_NTH|CALL|DATE_MONTH|IS_STRING|DATE_DAYOFWEEK|HAS|KEYS|CURRENT_DATABASE|MERGE|BOOST|SQRT|DATE_DIFF|MATCHES|GEO_POINT|GEO_EQUALS|UNSET_RECURSIVE|REMOVE_VALUES|KEEP|TRANSLATE|ZIP|DISTANCE|GEO_POLYGON|GEO_LINESTRING|GEO_MULTILINESTRING|DATE_TIMESTAMP|ASSERT|DATE_YEAR|DATE_SECOND|TO_LIST|LIKE|DATE_DAYOFYEAR|DATE_LEAPYEAR|CEIL|DATE_FORMAT|OUTERSECTION|DATE_DAYS_IN_MONTH|NEAR|DATE_ADD|DATE_COMPARE|UUID|NOT_NULL|FIRST_DOCUMENT|IS_ARRAY|PARSE_IDENTIFIER|GEO_DISTANCE|UNSET|DECODE_REV|DATE_MINUTE|COLLECTIONS|FULLTEXT|TAN|SOUNDEX|VERSION|TO_BOOL|NOOPT|LOG10|PREGEL_RESULT|WITHIN|DOCUMENT|CHECK_DOCUMENT|WARN|WITHIN_RECTANGLE|TOKENS|EXISTS|PHRASE|IN_RANGE|MIN_MATCH)\\b",
					"name": "support.function.aql"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.aql"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.aql"
						}
					},
					"name": "string.quoted.single.aql",
					"patterns": [
						{
							"match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
							"name": "constant.character.escape.aql"
						},
						{
							"match": "[^']*[^\\n\\r'\\\\]$",
							"name": "invalid.illegal.string.aql"
						}
					]
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.aql"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.aql"
						}
					},
					"name": "string.quoted.double.aql",
					"patterns": [
						{
							"match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
							"name": "constant.character.escape.aql"
						},
						{
							"match": "[^\"]*[^\\n\\r\"\\\\]$",
							"name": "invalid.illegal.string.aql"
						}
					]
				},
				{
					"begin": "`",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.aql"
						}
					},
					"end": "`",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.aql"
						}
					},
					"name": "string.quoted.template.aql",
					"patterns": [
						{
							"match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
							"name": "constant.character.escape.aql"
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"match": "//.*",
					"name": "comment.line.double-slash.aql"
				},
				{
					"begin": "/\\*\\*(?!/)",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.aql"
						}
					},
					"end": "\\*/",
					"name": "comment.block.documentation.aql"
				},
				{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.aql"
						}
					},
					"end": "\\*/",
					"name": "comment.block.aql"
				}
			]
		},
		"punctuations": {
			"patterns": [
				{
					"match": "\\{|\\}|\\(|\\)|\\[|\\]",
					"name": "punctuation.definition.block.aql"
				},
				{
					"match": "\\,|\\.|\\:",
					"name": "punctuation.separator.block.aql"
				}
			]
		}
	},
	"scopeName": "source.aql"
}
