{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "_reference": "https://raw.githubusercontent.com/arangodb/arangodb/master/js/apps/system/_admin/aardvark/APP/frontend/src/mode-aql.js",
  "name": "AQL (ArangoDB Query Language)",
  "patterns": [
    {
      "include": "#constant"
    },
    {
      "include": "#number"
    },
    {
      "include": "#keyword"
    },
    {
      "include": "#function"
    },
    {
      "include": "#string"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#punctuations"
    }
  ],
  "repository": {
    "constant": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.aql",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "constant.language.boolean.false.aql",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "constant.language.null.aql",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))null(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "match": "!|[!<>]?(=|~)|<>|<|>|~",
          "name": "keyword.operator.comparison.aql"
        },
        {
          "match": "\\-|\\+|\\*|\\%|((?<=[^\\/])(?<=[^\\*]))\\/(?=[^\\/])(?=[^\\*])",
          "name": "keyword.operator.arithmetic.aql"
        },
        {
          "match": "\\|\\|",
          "name": "keyword.operator.or.aql"
        },
        {
          "match": "\\&\\&",
          "name": "keyword.operator.and.aql"
        },
        {
          "begin": "(?!\\?\\.\\s*[^[:digit:]])(\\?)(?!\\?)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.ternary.aql"
            }
          },
          "end": "\\s*(:)",
          "endCaptures": {
            "1": {
              "name": "keyword.operator.ternary.aql"
            }
          },
          "patterns": [
            {
              "include": "#constant"
            },
            {
              "include": "#number"
            },
            {
              "include": "#keyword"
            },
            {
              "include": "#function"
            },
            {
              "include": "#string"
            },
            {
              "include": "#comments"
            },
            {
              "include": "#punctuations"
            }
          ]
        }
      ]
    },
    "number": {
      "match": "\\b\\d+\\b",
      "name": "constant.numeric.aql"
    },
    "keyword": {
      "patterns": [
        {
          "match": "(?i)\\b(FOR|RETURN|FILTER|SEARCH|SORT|LIMIT|LET|COLLECT|ASC|DESC|IN|INTO|INSERT|UPDATE|REMOVE|REPLACE|UPSERT|OPTIONS|WITH|AND|OR|NOT|DISTINCT|GRAPH|SHORTEST_PATH|OUTBOUND|INBOUND|ANY|ALL|NONE|AGGREGATE|LIKE|K_SHORTEST_PATHS|K_PATHS|PRUNE|WINDOW)\\b",
          "name": "keyword.control.aql"
        }
      ]
    },
    "function": {
      "patterns": [
        {
          "match": "(?i)\\b(TOKENS|BM25|TFIDF|BOOST|MIN_MATCH|STARTS_WITH|EXISTS|FULLTEXT|WITHIN_RECTANGLE|WITHIN|NEAR|ASSERT|COLLECTION_COUNT|CURRENT_DATABASE|SLEEP|NOEVAL|FAIL|CALL_GREENSPUN|WARN|SCHEMA_VALIDATE|PHRASE|SCHEMA_GET|FIRST_DOCUMENT|POP|IS_DOCUMENT|UNION_DISTINCT|RANGE|BIT_NEGATE|LENGTH|DEGREES|MERGE_RECURSIVE|ATAN2|ACOS|IS_LIST|UNSHIFT|TRIM|EXP|LAST|ATTRIBUTES|PREGEL_RESULT|LOG10|POW|IS_SAME_COLLECTION|GEO_INTERSECTS|LOG2|BIT_AND|RANDOM_TOKEN|V8|COUNT_UNIQUE|RAND|IN_RANGE|ABS|GEO_AREA|OUTERSECTION|DATE_DAYS_IN_MONTH|LEVENSHTEIN_DISTANCE|INTERLEAVE|BOOSTSCORE|MERGE|SIN|EXP2|ENCODE_URI_COMPONENT|NGRAM_SIMILARITY|SUM|BIT_TO_STRING|BIT_SHIFT_RIGHT|SLICE|BIT_SHIFT_LEFT|REPLACE_NTH|BIT_DECONSTRUCT|LOWER|COS|MIN|SUBSTRING|JACCARD|IS_OBJECT|STDDEV_SAMPLE|DATE_TRUNC|SORTED|REGEX_REPLACE|GEO_MULTIPOLYGON|ANALYZER|CONCAT|SHA1|CHAR_LENGTH|PUSH|FIND_LAST|JSON_STRINGIFY|MINUS|LEFT|VALUES|DATE_DAY|BIT_TEST|TO_STRING|IS_NUMBER|NOOPT|TO_BOOL|FNV64|RADIANS|LOG|INTERSECTION|PI|DATE_SUBTRACT|VERSION|SOUNDEX|TAN|IPV4_FROM_NUMBER|ROUND|RIGHT|UPPER|APPEND|TYPENAME|TO_HEX|DATE_ROUND|MD5|IS_IN_POLYGON|LEVENSHTEIN_MATCH|DATE_UTCTOLOCAL|PARSE_IDENTIFIER|IS_ARRAY|ASIN|BIT_OR|KEYS|TO_BASE64|AVG|COLLECTIONS|DATE_MINUTE|DATE_ISOWEEK|TO_ARRAY|IS_IPV4|DATE_ISO8601|IS_BOOL|CONTAINS|IS_DATESTRING|REGEX_MATCHES|SPLIT|CURRENT_USER|PRODUCT|BIT_POPCOUNT|APPLY|REGEX_SPLIT|DATE_TIMEZONES|UNION|DATE_MILLISECOND|NGRAM_MATCH|RTRIM|BIT_CONSTRUCT|FIND_FIRST|ATAN|GEO_MULTIPOINT|BIT_XOR|LTRIM|CONCAT_SEPARATOR|GEO_CONTAINS|PASSTHRU|HASH|FLOOR|IS_KEY|SUBSTITUTE|IPV4_TO_NUMBER|IS_NULL|CRC32|FLATTEN|JSON_PARSE|TO_NUMBER|COUNT|DATE_QUARTER|MAX|MEDIAN|STDDEV_POPULATION|REGEX_TEST|NGRAM_POSITIONAL_SIMILARITY|PERCENTILE|AVERAGE|VARIANCE_SAMPLE|VARIANCE_POPULATION|DATE_NOW|VARIANCE|COUNT_DISTINCT|BIT_FROM_STRING|UNIQUE|SORTED_UNIQUE|REVERSE|SHA512|DATE_HOUR|FIRST|REMOVE_VALUE|NTH|POSITION|CONTAINS_ARRAY|SHIFT|DATE_TIMEZONE|STDDEV|REMOVE_NTH|CALL|DATE_MONTH|IS_STRING|DATE_DAYOFWEEK|HAS|SQRT|DATE_DIFF|MATCHES|DECODE_REV|GEO_DISTANCE|UNSET|GEO_POINT|GEO_EQUALS|UNSET_RECURSIVE|REMOVE_VALUES|KEEP|TRANSLATE|ZIP|CHECK_DOCUMENT|DOCUMENT|DISTANCE|GEO_IN_RANGE|GEO_POLYGON|GEO_LINESTRING|GEO_MULTILINESTRING|DATE_TIMESTAMP|DATE_YEAR|DATE_SECOND|TO_LIST|LIKE|DATE_DAYOFYEAR|DATE_LEAPYEAR|CEIL|DATE_FORMAT|DATE_ADD|DATE_COMPARE|FIRST_LIST|DATE_LOCALTOUTC|UUID|NOT_NULL)\\b",
          "name": "support.function.aql"
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.aql"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.aql"
            }
          },
          "name": "string.quoted.single.aql",
          "patterns": [
            {
              "match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
              "name": "constant.character.escape.aql"
            },
            {
              "match": "[^']*[^\\n\\r'\\\\]$",
              "name": "invalid.illegal.string.aql"
            }
          ]
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.aql"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.aql"
            }
          },
          "name": "string.quoted.double.aql",
          "patterns": [
            {
              "match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
              "name": "constant.character.escape.aql"
            },
            {
              "match": "[^\"]*[^\\n\\r\"\\\\]$",
              "name": "invalid.illegal.string.aql"
            }
          ]
        },
        {
          "begin": "`",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.aql"
            }
          },
          "end": "`",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.aql"
            }
          },
          "name": "string.quoted.template.aql",
          "patterns": [
            {
              "match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
              "name": "constant.character.escape.aql"
            }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "match": "//.*",
          "name": "comment.line.double-slash.aql"
        },
        {
          "begin": "/\\*\\*(?!/)",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.aql"
            }
          },
          "end": "\\*/",
          "name": "comment.block.documentation.aql"
        },
        {
          "begin": "/\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.aql"
            }
          },
          "end": "\\*/",
          "name": "comment.block.aql"
        }
      ]
    },
    "punctuations": {
      "patterns": [
        {
          "match": "\\{|\\}|\\(|\\)|\\[|\\]",
          "name": "punctuation.definition.block.aql"
        },
        {
          "match": "\\,|\\.|\\:",
          "name": "punctuation.separator.block.aql"
        }
      ]
    }
  },
  "scopeName": "source.aql"
}